#include <cs50.h>
#include <stdio.h>
#include <crypt.h>
#include <string.h>
#include <unistd.h>

int main(int argc, string argv[])
{

    if (argc != 2){
        printf("./crack hash\n");
        return 1;
    }
    
    string hash = argv[1];
    
    // get the salt from the input command
    char salt[3] = {hash[0], hash[1], '\0'};
    
    // all letters possible in guessing the password
    string guess = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int guesslen = strlen(guess);
    
    // if the password is length of 1
    char pass1[2];
    for (int i=0; i < guesslen; i++)
    {
        pass1[0] = guess[i];
        pass1[1] = '\0';
        
        // hashes the pass1
        string passguess = crypt(pass1, salt);
        // if hash of pass1 = the command hash
        if (strcmp(passguess, hash)==0)
        {
            printf("%s\n", pass1);
            return 0;
        }
    }
    
    //if password is of length 2
    char pass2[3];
    for (int i=0; i < guesslen; i++)
    {
        for (int j=0; j < guesslen; j++)
        {
            pass2[0] = guess[i];
            pass2[1] = guess[j];
            pass2[2] = '\0';

            string passguess = crypt(pass2, salt);
            if (strcmp(passguess, hash)==0)
            {
                printf("%s\n", pass2);
                return 0;
            }
        }
    }
    
    //if password is of length 3
    char pass3[4];
    for (int i=0; i < guesslen; i++)
    {
        for (int j=0; j < guesslen; j++)
        {
            for (int k=0; k < guesslen; k++)
            {
                pass3[0] = guess[i];
                pass3[1] = guess[j];
                pass3[2] = guess[k];
                pass3[3] = '\0';

                string passguess = crypt(pass3, salt);
                if (strcmp(passguess, hash)==0)
                {
                    printf("%s\n", pass3);
                    return 0;
                }
            }
        }
    }
    
    //if password is of length 4
    char pass4[5];
    for (int i=0; i < guesslen; i++)
    {
        for (int j=0; j < guesslen; j++)
        {
            for (int k=0; k < guesslen; k++)
            {
                for (int l=0; l < guesslen; l++)
                {
                    pass4[0] = guess[i];
                    pass4[1] = guess[j];
                    pass4[2] = guess[k];
                    pass4[3] = guess[l];
                    pass4[4] = '\0';

                    string passguess = crypt(pass4, salt);
                    if (strcmp(passguess, hash)==0)
                    {
                        printf("%s\n", pass4);
                        return 0;
                    }
                }
            }
        }
    }
    
    //if password is of length 5
    char pass5[6];
    for (int i=0; i < guesslen; i++)
    {
        for (int j=0; j < guesslen; j++)
        {
            for (int k=0; k < guesslen; k++)
            {
                for (int l=0; l < guesslen; l++)
                {
                    for (int m=0; m < guesslen; m++)
                    {
                        pass5[0] = guess[i];
                        pass5[1] = guess[j];
                        pass5[2] = guess[k];
                        pass5[3] = guess[l];
                        pass5[4] = guess[m];
                        pass5[5] = '\0';

                        string passguess = crypt(pass5, salt);
                        if (strcmp(passguess, hash)==0)
                        {
                            printf("%s\n", pass5);
                            return 0;
                        }
                    }
                }
            }
        }
    }
    
    //if brute force up to 5 characters of alphabetical does not work
    printf("Password longer than 5 characters or not only alphas.\n");
    return 0;
    
}
