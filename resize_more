// Copies a BMP file

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "bmp.h"

int main(int argc, char *argv[])
{
    // ensure proper usage
    if (argc != 4)
    {
        fprintf(stderr, "Usage: copy infile outfile\n");
        return 1;
    }

    // remember filenames
    char *infile = argv[2];
    char *outfile = argv[3];
    // sscanf(argv[], "%s %f %s %s", randomvariablename, resizeby, *infile, *outfile);


    // takes the first argument and makes it into a float. This is what we scale by. Then round to nearest tenths place.
    float resizeby = atof(argv[1]);
    resizeby = roundf(resizeby * 10) / 10;

    // open input file
    FILE *inptr = fopen(infile, "r");
    if (inptr == NULL)
    {
        fprintf(stderr, "Could not open %s.\n", infile);
        return 2;
    }

    // open output file
    FILE *outptr = fopen(outfile, "w");
    if (outptr == NULL)
    {
        fclose(inptr);
        fprintf(stderr, "Could not create %s.\n", outfile);
        return 3;
    }

    // read infile's BITMAPFILEHEADER
    BITMAPFILEHEADER bf;
    fread(&bf, sizeof(BITMAPFILEHEADER), 1, inptr);

    // read infile's BITMAPINFOHEADER
    BITMAPINFOHEADER bi;
    fread(&bi, sizeof(BITMAPINFOHEADER), 1, inptr);

    // ensure infile is (likely) a 24-bit uncompressed BMP 4.0
    if (bf.bfType != 0x4d42 || bf.bfOffBits != 54 || bi.biSize != 40 ||
        bi.biBitCount != 24 || bi.biCompression != 0)
    {
        fclose(outptr);
        fclose(inptr);
        fprintf(stderr, "Unsupported file format.\n");
        return 4;
    }

    // outfile bmp settings
    BITMAPFILEHEADER outbf = bf;
    BITMAPINFOHEADER outbi = bi;

    outbi.biWidth = bi.biWidth * resizeby;
    outbi.biHeight = bi.biHeight * resizeby;

    // change output file's padding amount
    int resizepadding = (4 - (outbi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;

    // change amount of bytes needed total for output bmp img
    outbi.biSizeImage = ((sizeof(RGBTRIPLE)*outbi.biWidth) + resizepadding) * abs(outbi.biHeight);
    // change total size of file
    outbf.bfSize = outbi.biSizeImage + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);

    // write outfile's BITMAPFILEHEADER
    fwrite(&outbf, sizeof(BITMAPFILEHEADER), 1, outptr);

    // write outfile's BITMAPINFOHEADER
    fwrite(&outbi, sizeof(BITMAPINFOHEADER), 1, outptr);

    // determine padding for scanlines
    int padding = (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;

    if (resizeby < 1)
    {

        // iterate over infile's scanlines
        for (int i = 0, biHeight = abs(bi.biHeight) * resizeby; i < biHeight; i++)
        {

            // iterate over pixels in scanline
            for (int j = 0; j < bi.biWidth * resizeby; j++)
            {

                // temporary storage
                RGBTRIPLE triple;

                // read RGB triple from infile
                fread(&triple, sizeof(RGBTRIPLE), 1, inptr);

                // write RGB triple to outfile
                fwrite(&triple, sizeof(RGBTRIPLE), 1, outptr);

                //skips a few pixels based on scaling
                fseek (inptr, (3 * ((1 / resizeby)-1)), SEEK_CUR);
            }

            // skip over padding, if any
            fseek(inptr, padding, SEEK_CUR);

            // add padding if padding is needed
            if (resizepadding != 0)
            {

                for (int j = 0; j < resizepadding; j++)
                {

                    fputc(0x00, outptr);
                }
            }

            //skip lines (biHeight) by amount of scaling
            int reversescale = 1 / resizeby;
            printf("%i", reversescale);

            for (int k = 0; k < reversescale - 1; k++)
            {

                fseek(inptr, (bi.biWidth * 3) + padding, SEEK_CUR);
            }

        }
    }

    // or if resizeby >= 1
    else
    {
        // iterate over infile's scanlines
        for (int i = 0, biHeight = abs(bi.biHeight); i < biHeight; i++)
        {

            for (int m = 0; m < resizeby; m++)
            {

                // iterate over pixels in scanline
                for (int j = 0; j < bi.biWidth; j++)
                {
                    // temporary storage
                    RGBTRIPLE triple;

                    // read RGB triple from infile
                    fread(&triple, sizeof(RGBTRIPLE), 1, inptr);

                    // prints the pixel multiple times by number of scale
                    for (int k = 0; k < resizeby; k++)
                    {
                        // write RGB triple to outfile
                        fwrite(&triple, sizeof(RGBTRIPLE), 1, outptr);
                    }
                }

                // skip over padding, if any
                fseek(inptr, padding, SEEK_CUR);

                // add padding if padding is needed
                if (resizepadding != 0)
                {

                    for (int j = 0; j < resizepadding; j++)
                    {
                        fputc(0x00, outptr);
                    }
                }

                //return to beginning of line to repeat the pixels by amount of scale times
                if (resizeby > 1)
                {

                    if (m < resizeby - 1)
                    {

                        fseek (inptr, -((bi.biWidth * 3) + padding), SEEK_CUR);
                    }
                }
            }
        }

    }

    // close infile
    fclose(inptr);

    // close outfile
    fclose(outptr);

    // success
    return 0;
}
